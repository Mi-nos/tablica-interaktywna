# -*- coding: utf-8 -*-
"""paint.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wEhkllnQmK39af03WRAy5_HMPN3UbP-0
"""

from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.button import Button
from kivy.uix.colorpicker import ColorPicker
from kivy.graphics import Color, Line, Rectangle
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.slider import Slider

class MyPaintWidget(Widget):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.current_color = (1, 0, 0)
        self.line_width = 2
        self.draw_separator_line()

    def set_color(self, color):
        """Aktualizuje kolor rysowania."""
        self.current_color = color

    def erase(self, instance):
        """Ustawia gumkę."""
        self.current_color = (0, 0, 0)

    def on_touch_down(self, touch):
        if touch.x >= 400: # < 400 to pasek narzędzi
            with self.canvas:
                Color(*self.current_color)
                touch.ud['line'] = Line(points=(touch.x, touch.y), width=self.line_width)

    def on_touch_move(self, touch):
        if touch.x >= 400 and 'line' in touch.ud:
            touch.ud['line'].points += [touch.x, touch.y]

    def set_line_width(self, width):
        """Zmienia grubość linii."""
        self.line_width = width

    def clear_canvas(self, *args):
        self.canvas.clear()

    def draw_separator_line(self):
        """Pionowa linia separująca pasek narzedzi od pola rysowania"""
        with self.canvas:
            Color(128, 128, 128)
            Line(points=[400, 0, 400, 2400], width=2) #powinno dostosowywać się do ekranu, ale to na razie najlepsze rozw

class MyPaintApp(App):
    def build(self):
        parent = Widget()
        layout = BoxLayout(size=(400, 600), orientation='vertical')

        self.painter = MyPaintWidget()
        clearbtn = Button(text='Clear', size_hint_y=None, height=50)
        erasebtn = Button(text='Gumka', size_hint_y=None, height=50)

        color_picker = ColorPicker(size_hint_y=None, height=400)
        color_picker.bind(color=self.update_color)


        line_width_slider = Slider(min=1, max=10, value=2, step=1, size_hint_y=None, height=50)
        line_width_slider.bind(value=self.update_line_width)

        layout.add_widget(color_picker)
        layout.add_widget(erasebtn)
        layout.add_widget(clearbtn)
        layout.add_widget(line_width_slider)

        parent.add_widget(layout)
        parent.add_widget(self.painter)

        clearbtn.bind(on_release=self.painter.clear_canvas)
        erasebtn.bind(on_release=self.painter.erase)

        return parent

    def update_color(self, instance, value):
        self.painter.set_color(value[:3])

    def update_line_width(self, instance, value):
        """Aktualizuje grubość linii."""
        self.painter.set_line_width(value)

if __name__ == '__main__':
    MyPaintApp().run()